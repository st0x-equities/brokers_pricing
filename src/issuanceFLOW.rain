/* coupon (signer, context: [Domain seperator, Broker ID, Amount, IO ratio, expiry], signature)*/
/* signer context:
struct SignedContextV1 {
    // The ordering of these fields is important and used in assembly offset
    // calculations and hashing.
    address signer;
    uint256[] context;
    bytes signature;
}*/

/*check the signer is correct */
required_signer: 0x0124555E401547219fB024aE5F8C5101c6f7Cb24,
provided_signer: context<2 0>(),
:ensure(provided_signer required_signer),

/* verify the token input/output by the user is the one provided by the broker */
coupon_domain_seperator: context<3 0>(),
caller_tokenaddress_input : context<1 0>(),
caller_tokenaddress_output : context<1 2>,
ob_address : 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,

:ensure(equal-to(coupon_domain_separator hash(caller_tokenaddress_input caller_tokenaddress_output ob_address))),

/* verify the expiry on the coupon has not passed*/
expiry: context<3 4>(),
:ensure(less-than(expiry block-timestamp)),

/* verify user input is not larger than the amount limit */
couponAmountLimit: context<3 2>(),
caller_token_input_amount: context<1 1>(),
volume_record_has: hash(coupon_domain_seperator expiry),
volume_record:get(volume_record_hash),

:ensure(less-than(volume_record couponAmountLimit)),

/* handles partial fills */
IO_ratio: context<3 3>(),
asked_output_size: div(called_token_input_amount IO_ratio),
trade_amount: if(less-than(add(asked_output_size volume_record)couponAmountLimit) caller_token_input_amount mul(sub(couponAmountLimit volume_record) IO_ratio)),

/* calculate ouput amount */
actual_output_size: div(trade_amount IO_ratio),

/* increment volume_record by trade amount */
set:(volume_record_hash add(volume_record actual_output_size)),

/**
 * separator values
 */
transferseparator: 0xfea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974f,
mintburnseparator: 0xf339171dab445c29f9897dda2f42413426ee907dc7f8b52bd387bc7cf9384c6b,

/**
 * erc1155 transfers
 */
transfererc1155slist: transferseparator,

/**
 * erc721 transfers - this is empty
 */
transfererc721slist: transferseparator,

/**
 * er20 transfers - this is empty
 */
transfererc20slist: transferseparator,
broker_address: 0x,
caller_address: context<0 0>(),
_ _ _ _: caller_address broker_address USDT_address trade_amount,

/**
 * native (gas) token transfers
 */
transfernativeslist: transferseparator,

/**
 * burns of this erc20 token
 */
burnslist: mintburnseparator,


/**
 * mints of this erc20 token
 */
mintslist: mintburnseparator,
flow_address: context<0 1>(),
_ _: flow_address caller_address actual_output_size;